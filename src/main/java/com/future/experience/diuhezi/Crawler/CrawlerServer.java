package com.future.experience.diuhezi.Crawler;

import com.future.foundation.threads.ThreadExtend;

import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Created by xingfeiy on 7/22/18.
 */
public class CrawlerServer {
    public static void main(String[] args) {
        BlockingQueue<String> urlQueue = new ArrayBlockingQueue<String>(100);
        BlockingQueue<String> contentQueue = new ArrayBlockingQueue<String>(100);
        AtomicInteger counter = new AtomicInteger(0);
        ConcurrentHashMap<String, String> visited = new ConcurrentHashMap();
        //WebCrawler is responsible for get content from internet.
        // - Takes an url from urlQueue
        // - get the content and store it contentQueue.
        //ContentAnalyzer is responsible for content analyze.
        // - Takes a content from contentQueue.
        // - Analyze content and extract the URLs, and then store it into urlQueue.
        //exit?
        //urlQueue is empty and ContentAnalyzer don't produce url anymore.
        // ContentAnalyzer finished all contents that generated by WebCrawler.

        //simulation
        // 6 web crawler, and 4 analyzer
        urlQueue.offer("First URL");
        Thread[] crawlers = new Thread[6];
        WebCrawler crawler = new WebCrawler(urlQueue, contentQueue, counter, visited);
        for(int i = 0; i < 6; i++) {
            crawlers[i] = new Thread(crawler, "Crawler-" + i);
        }

        Thread[] analyzers = new Thread[4];
        ContentAnalyzer analyzer = new ContentAnalyzer(urlQueue, contentQueue, counter, visited);
        for(int i = 0; i < 4; i++) analyzers[i] = new Thread(analyzer, "Analyzer-" + i);

        for(int i = 0; i < 6; i++) crawlers[i].start();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        for(int i = 0; i < 4; i++) analyzers[i].start();

        try {
            Thread.currentThread().join(60000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("==========Summary============");
        for(Map.Entry<String, String> entry : visited.entrySet()) {
            System.out.println(entry.getValue() + " finished " + entry.getKey());
        }
    }
}
