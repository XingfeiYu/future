package com.future.experience.linying;

/**
 * 一个双向链表，带头尾指针，每个节点可能都有父节点和子节点，每个父子节点又是
 * 一个链表。要求把它拍扁，顺序随意。
 * 一开始说了一个类似DFS的算法，他说我的空间复杂度是O(N)，我说递归的方法如果堆
 * 栈空间也算的话确实是O(N)，但他咬定我临时放节点的地方也是O(N)，楞说我存节点需
 * 要分配额外空间，我就很纳闷，这节点都已经是双向链表了，里面有next/prev，为毛
 * 还需要分配O(N)的空间来存这些节点？坚持跟他讨论半天，把节点定义什么都给出来，
 * 一点一点说明白，才证明是他理解有问题，幸好还算坚持，不然就被他带沟里去了。
 * 当然这个算法有更好的解，既然不要求顺序，而且有头尾指针，每次把父子链表接到尾
 * 巴后面就可以了。连递归都省了
 *
 * 除了child还有parent，除了head，还有tail
 * 一个node，有上下左右4个link到其他的node，给一个类似于图的很多node，让把这些
 *
 * node全部合并到一层。
 *
 * d
 *
 * |
 *
 * A-B-C
 *
 * |
 *
 * E
 *
 *
 *
 * 输出可以是，A-B-D-C-E，只要是压缩到一个level就可以。
 *
 */
public class FlattenLinkedList {
}
